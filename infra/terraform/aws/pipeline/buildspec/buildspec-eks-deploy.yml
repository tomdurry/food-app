version: 0.2

phases:
  install:
    commands:
      - echo "Installing kubectl"
      - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x kubectl
      - mv kubectl /usr/local/bin/
      - echo "Installing aws-iam-authenticator"
      - curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2021-01-05/bin/linux/amd64/aws-iam-authenticator
      - chmod +x aws-iam-authenticator
      - mv aws-iam-authenticator /usr/local/bin/
      - echo "Installing Helm"
      - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      - echo "Installing CertManager"

  pre_build:
    commands:
      - cd infra/terraform/aws/pipeline
      - aws eks update-kubeconfig --region ap-northeast-1 --name $CLUSTER_NAME
      - kubectl get namespace prod || kubectl create namespace prod
      - export POSTGRES_HOST=$(aws ssm get-parameter --name "/prod/rds_endpoint" --query "Parameter.Value" --output text)
      - export ACM_CERT_ARN=$(aws ssm get-parameter --name "/prod/lb_certificate_arn" --query "Parameter.Value" --output text)
      - kubectl annotate configmap aws-auth -n kube-system meta.helm.sh/release-name=go-app || echo "ConfigMap aws-auth not found"
      - kubectl annotate configmap aws-auth -n kube-system meta.helm.sh/release-namespace=prod || echo "ConfigMap aws-auth not found"
      - kubectl label configmap aws-auth -n kube-system app.kubernetes.io/managed-by=Helm || echo "ConfigMap aws-auth not found"
      - kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.16.2/cert-manager.yaml
      - echo "Adding Helm repository for AWS Load Balancer Controller"
      - helm repo add eks https://aws.github.io/eks-charts
      - helm repo update
      - |
        eksctl utils associate-iam-oidc-provider \
          --region ap-northeast-1 \
          --cluster food-app-cluster-prod \
          --approve
      - |
        eksctl create iamserviceaccount \
          --name aws-load-balancer-controller \
          --namespace kube-system \
          --cluster $CLUSTER_NAME \
          --region ap-northeast-1 \
          --attach-policy-arn arn:aws:iam::039725305879:policy/AWSLoadBalancerControllerIAMPolicy \
          --approve \
          --override-existing-serviceaccounts
      # - kubectl get serviceaccount aws-load-balancer-controller -n kube-system
      - |
        helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
          -n kube-system \
          --set clusterName=$CLUSTER_NAME \
          --set serviceAccount.create=false \
          --set serviceAccount.name=aws-load-balancer-controller \
          --set region=ap-northeast-1 \
          --set vpcId=vpc-06e6cb7ad63983a59 \
          --set targetType=ip

  build:
    commands:
      - helm upgrade --install go-app ./k8s --namespace prod --set postgresHost=$POSTGRES_HOST --set acmCertArn=$ACM_CERT_ARN
      - |
        while true; do
          REACT_APP_API_URL=$(kubectl get service go-app-service -n prod -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
          if [ -n "$REACT_APP_API_URL" ]; then
            echo "Load balancer is ready: $REACT_APP_API_URL"
            break
          else
            echo "Waiting for load balancer..."
            sleep 10
          fi
        done
      - echo "REACT_APP_API_URL=${REACT_APP_API_URL}"
      - aws ssm put-parameter --name "/prod/react_app_api_url" --value "https://${REACT_APP_API_URL}" --type "String" --overwrite

  post_build:
    commands:
      - echo "Deployment complete"

artifacts:
  files:
    - "**/*"